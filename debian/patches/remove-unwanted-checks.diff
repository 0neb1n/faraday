Description: Remove unwanted checks
 We don't want that user updates with update option: no need to check the
 version and to propose updates. We don't need to check if dependencies are
 installed: apt does that at the installation. 
Author: Sophie Brun <sophie@freexian.com>
Last-Update: 2016-08-18
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
--- a/faraday.py
+++ b/faraday.py
@@ -198,44 +198,6 @@ def query_user_bool(question, default=Tr
                          "(or 'y' or 'n').\n")
 
 
-def checkDependencies():
-    """Dependency resolver based on a previously specified CONST_REQUIREMENTS_FILE.
-
-    Currently checks a list of dependencies from a file and asks for user
-    confirmation on whether to install it with a specific version or not.
-
-    """
-
-    if not args.ignore_deps:
-        try:
-            import pip
-            modules = []
-            f = open(FARADAY_REQUIREMENTS_FILE)
-            for line in f:
-                if not line.find('#'):
-                    break
-                else:
-                    modules.append(line.strip('\n'))
-            f.close()
-            pip_dist = [dist.project_name.lower() for dist in pip.get_installed_distributions()]
-            for module in modules:
-                if module.lower() not in pip_dist:
-                    try:
-                        __import__(module)
-                    except ImportError:
-                        if query_user_bool("Missing module %s."
-                            " Do you wish to install it?" % module):
-                            pip.main(['install', "%s" %
-                                     module, '--user'])
-
-                        else:
-                            return False
-        except ImportError:
-            pass
-
-    return True
-
-
 def startProfiler(app, output, depth):
     """Profiler handler.
 
@@ -469,27 +431,6 @@ def update():
         logger.info("Update process finished with no errors")
         logger.info("Faraday will start now.")
 
-def checkUpdates():
-    import requests
-    uri = getInstanceConfiguration().getUpdatesUri()
-    resp = u"OK"
-    try:
-        f = open(FARADAY_VERSION_FILE)
-
-        getInstanceConfiguration().setVersion(f.read().strip())
-        getInstanceConfiguration().setAppname("Faraday - Penetration Test IDE Community")
-        parameter = {"version": getInstanceConfiguration().getVersion()}
-
-        f.close()
-        resp = requests.get(uri, params=parameter, timeout=1, verify=True)
-        resp = resp.text.strip()
-    except Exception as e:
-        logger.error(e)
-    if not resp == u'OK':
-        logger.info("You have available updates. Run ./faraday.py --update to catchup!")
-    else:
-        logger.info("No updates available, enjoy Faraday.")
-
 
 def checkCouchUrl():
     import requests
@@ -506,23 +447,6 @@ def checkCouchUrl():
         # Non fatal error
         pass
 
-def checkVersion():
-    try:
-        f = open(FARADAY_VERSION_FILE)
-        f_version = f.read().strip()
-        if not args.update:
-            if getInstanceConfiguration().getVersion() != None and getInstanceConfiguration().getVersion() != f_version:
-                logger.warning("You have different version of Faraday since your last run.\nRun ./faraday.py --update to update configuration!")
-                if query_yes_no('Do you want to close Faraday?', 'yes'):
-                    sys.exit(-1)
-
-        getInstanceConfiguration().setVersion(f_version)
-        f.close()
-
-    except Exception as e:
-        getLogger("launcher").error("It seems that something's wrong with your version\nPlease contact customer support")
-        sys.exit(-1)
-
 
 def init():
     """Initializes what is needed before starting.
@@ -550,20 +474,20 @@ def main():
     os.chdir(FARADAY_BASE)
 
     init()
-    if checkDependencies():
-        printBanner()
-        logger.info("Dependencies met.")
-        if args.cert_path:
-            os.environ[REQUESTS_CA_BUNDLE_VAR] = args.cert_path
-        checkConfiguration(args.gui)
-        setConf()
-        checkCouchUrl()
-        checkVersion()
-        update()
-        checkUpdates()
-        startFaraday()
-    else:
-        logger.error("Dependencies not met. Unable to start Faraday.")
+#    if checkDependencies():
+    printBanner()
+ #       logger.info("Dependencies met.")
+    if args.cert_path:
+        os.environ[REQUESTS_CA_BUNDLE_VAR] = args.cert_path
+    checkConfiguration(args.gui)
+    setConf()
+    checkCouchUrl()
+#        checkVersion()
+    update()
+#        checkUpdates()
+    startFaraday()
+#    else:
+#        logger.error("Dependencies not met. Unable to start Faraday.")
 
 
 if __name__ == '__main__':
--- a/faraday-server.py
+++ b/faraday-server.py
@@ -11,7 +11,6 @@ import server.config
 import server.couchdb
 
 from server.utils import daemonize
-from utils.dependencies import DependencyChecker
 from utils.user_input import query_yes_no
 
 logger = server.utils.logger.get_logger(__name__)
@@ -57,42 +56,12 @@ def setup_environment():
     # Configuration files generation
     server.config.copy_default_config_to_local()
 
-    # Dependencies installation
-    missing_packages = check_dependencies()
-    if len(missing_packages) > 0:
-        install_packages(missing_packages)
-
     # Web configuration file generation
     server.config.gen_web_config()
 
     # Reports DB creation
     server.couchdb.push_reports()
 
-def check_dependencies():
-    checker = DependencyChecker(server.config.REQUIREMENTS_FILE)
-    missing = checker.check_dependencies()
-    return missing
-
-def install_packages(packages):
-    if ask_to_install(packages):
-        logger.info("Dependencies installed. Please launch Faraday Server again")
-        sys.exit(0)
-    else:
-        logger.error("Dependencies not met")
-        sys.exit(1)
-
-def ask_to_install(missing_packages):
-    logger.warning("The following packages are not installed:")
-    for package in missing_packages:
-        logger.warning("%s" % package)
-
-    if query_yes_no("Do you want to install them?", default="no"):
-        checker = DependencyChecker(server.config.REQUIREMENTS_FILE)
-        checker.install_packages(missing_packages)
-        return True
-
-    return False
-
 def import_workspaces():
     import server.importer
     server.importer.import_workspaces()
--- a/updates/updater.py
+++ b/updates/updater.py
@@ -24,19 +24,19 @@ from persistence.server.models import cr
 
 class Updater(object):
     def doUpdates(self):
-        logger.info('Removing old pyc files')
-        subprocess.call(['find', '.', '-name', '*.pyc', '-delete'])
-        logger.info('Pulling latest Github Master copy')
-        if query_yes_no('Proceed?', 'yes'):
-            subprocess.call(['git', 'pull'])
+#        logger.info('Removing old pyc files')
+#        subprocess.call(['find', '.', '-name', '*.pyc', '-delete'])
+#        logger.info('Pulling latest Github Master copy')
+#        if query_yes_no('Proceed?', 'yes'):
+#            subprocess.call(['git', 'pull'])
 
-        try:
-            import pip
-            logger.info('Installing missing dependencies in pip')
-            pip.main(['install', '-r', CONST_REQUIREMENTS_FILE, '--user'])
-        except ImportError:
-            logger.error("Checking missing dependencies in pip")
-            pass
+#        try:
+#            import pip
+#            logger.info('Installing missing dependencies in pip')
+#            pip.main(['install', '-r', CONST_REQUIREMENTS_FILE, '--user'])
+#        except ImportError:
+#            logger.error("Checking missing dependencies in pip")
+#            pass
 
 
         # logger.info('Upgrading DBs to latest version')
